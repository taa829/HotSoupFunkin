#module
gfcurframe = 0
gfcuranim = 0
gfatlas = 0
gfelapsed = 0.0

gfdur = 0
gfstate = ""

gfdata = ""

gfanimx = 0
gfanimy = 0

gfflip = 0
gfx = 0
gfy = 0
gfscale = 0
gfcamx = 0
gfcamy = 0

gfvalid = 0

#deffunc gfinit str atlaspath,str datapath,str imgpath
    sdim gfdata,0
    gfvalid = 0
    if (existfile(datapath) = 0) {
	    gfvalid = 0
	    return
	}
	else {
		gfvalid = 1
	}
    notesel buf
    noteload atlaspath 
    split buf,"\n",gfatlas       
    loadchar imgpath,5
    notesel gfdata
    noteload datapath
    gfstate = ""
    gfx = readcharoffsetx(gfdata)
    gfy = readcharoffsety(gfdata)
    gfscale = readcharscale(gfdata)
    gfcamx = readcharcamx(gfdata)
    gfcamy = readcharcamy(gfdata)
    gfflip = readcharflip(gfdata)
    return

#deffunc gfupdate int camx,int camy
    if (gfvalid = 0) : return
    if double(gfelapsed) > double(0.01) & gfcurframe < (length(gfcuranim) - 1) {
	    gfcurframe = gfcurframe + 1
	    gfelapsed = 0.0
	}
    readflush 8
    x = readx(gfatlas(int(gfcuranim(gfcurframe))))
    y = ready(gfatlas(int(gfcuranim(gfcurframe))))
    w = readw(gfatlas(int(gfcuranim(gfcurframe))))
    h = readh(gfatlas(int(gfcuranim(gfcurframe))))
    pivx = readpivotx(gfatlas(int(gfcuranim(gfcurframe))))
    pivy = readpivoty(gfatlas(int(gfcuranim(gfcurframe))))
    if (gfflip = 0) : drawcharwithpivot 5,x,y,w,h,gfx + gfanimx,gfy + gfanimy,double(w) * double(gfscale),double(h) * double(gfscale),camx,camy,pivx,pivy : else : drawcharwithpivot 5,x,y,w,h,gfx + gfanimx,gfy + gfanimy,double(w) * double(gfscale * -1),double(h) * double(gfscale),camx,camy,pivx,pivy
    gfelapsed = double(gfelapsed) + double(0.0025)
    gfdur = clampint(gfdur + 1,0,60)
    return

#deffunc gfplayanim str anim    
    if (gfstate != anim) {
	    if (existcharanim(gfdata,anim) = 0) : return
	    sdim gfcuranim,0
	    readcharanim gfdata,anim,gfcuranim
	    gfanimx = int(double(readcharanimationx(gfdata,anim)) * double(gfscale))
	    gfanimy = int(double(readcharanimationy(gfdata,anim)) * double(gfscale))
	    gfstate = anim
	}
	gfcurframe = 0
	gfdur = 0
    return

#defcfunc gfplaying
    if gfcurframe < (length(gfcuranim) - 1) : return 1
    return 0

#defcfunc gfduration
    return gfdur

#defcfunc gfanimstate
    return gfstate

#defcfunc gfcamerax
    return gfcamx

#defcfunc gfcameray
    return gfcamy
   
#global