#module
bfcurframe = 0
bfcuranim = 0
bfatlas = 0
bfelapsed = 0.0

bfdur = 0
bfstate = ""

bfdata = ""

bfanimx = 0
bfanimy = 0

bfflip = 0
bfx = 0
bfy = 0
bfscale = 0
bfcamx = 0
bfcamy = 0

bfvalid = 0

#deffunc bfinit str atlaspath,str datapath,str imgpath
    sdim bfdata,0
    bfvalid = 0
    if (existfile(datapath) = 0) {
	    bfvalid = 0
	    return
	}
	else {
		bfvalid = 1
	}
    notesel buf
    noteload atlaspath 
    split buf,"\n",bfatlas       
    loadchar imgpath,3
    notesel bfdata
    noteload datapath
    bfstate = ""
    bfx = readcharoffsetx(bfdata)
    bfy = readcharoffsety(bfdata)
    bfscale = readcharscale(bfdata)
    bfcamx = readcharcamx(bfdata)
    bfcamy = readcharcamy(bfdata)
    bfflip = readcharflip(bfdata)
    return

#deffunc bfupdate int camx,int camy
    if (bfvalid = 0) : return
    if double(bfelapsed) > double(0.01) & bfcurframe < (length(bfcuranim) - 1) {
	    bfcurframe = bfcurframe + 1
	    bfelapsed = 0.0
	}
    readflush 8
    x = readx(bfatlas(int(bfcuranim(bfcurframe))))
    y = ready(bfatlas(int(bfcuranim(bfcurframe))))
    w = readw(bfatlas(int(bfcuranim(bfcurframe))))
    h = readh(bfatlas(int(bfcuranim(bfcurframe))))
    pivx = readpivotx(bfatlas(int(bfcuranim(bfcurframe))))
    pivy = readpivoty(bfatlas(int(bfcuranim(bfcurframe))))
    if (bfflip = 0) : drawcharwithpivot 3,x,y,w,h,bfx + bfanimx,bfy + bfanimy,double(w) * double(bfscale),double(h) * double(bfscale),camx,camy,pivx,pivy : else : drawcharwithpivot 3,x,y,w,h,bfx + bfanimx,bfy + bfanimy,double(w) * double(bfscale * -1),double(h) * double(bfscale),camx,camy,pivx,pivy
    bfelapsed = double(bfelapsed) + double(0.0025)
    bfdur = clampint(bfdur + 1,0,60)
    return

#deffunc bfplayanim str anim    
    if (bfstate != anim) {
	    if (existcharanim(bfdata,anim) = 0) : return
	    sdim bfcuranim,0
	    readcharanim bfdata,anim,bfcuranim
	    bfanimx = int(double(readcharanimationx(bfdata,anim)) * double(bfscale))
	    bfanimy = int(double(readcharanimationy(bfdata,anim)) * double(bfscale))
	    bfstate = anim
	}
	bfcurframe = 0
	bfdur = 0
    return

#defcfunc bfplaying
    if bfcurframe < (length(bfcuranim) - 1) : return 1
    return 0

#defcfunc bfduration
    return bfdur

#defcfunc bfanimstate
    return bfstate

#defcfunc bfcamerax
    return bfcamx

#defcfunc bfcameray
    return bfcamy
   
#global